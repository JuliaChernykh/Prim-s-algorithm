
# A Python program for Prim's Minimum Spanning Tree (MST) algorithm. 
# The program is for adjacency matrix representation of the graph 
  
import networkx as nx
import random
import time
import sys  
  
class Graph(): 
  
    def __init__(self, vertices): 
        self.V = vertices 
        self.graph = [[0 for column in range(vertices)]  
                    for row in range(vertices)] 
  
    def printMST(self, parent, total_time): 
        adjacency_matrix_after = [[0 for i in range(6)] for j in range(6)]
        print("\n")
        print("MST adjacency matrix:")
        for i in range(1, self.V): 
            adjacency_matrix_after[parent[i]][i] = self.graph[i][parent[i]]
            adjacency_matrix_after[i][parent[i]] = self.graph[i][parent[i]]
        for i in range(6):
          print(adjacency_matrix_after[i])
        print("\n")
        print("Time: ", total_time)
    # Finding the vertex with minimum distance value, from the set of vertices which are not included in shortest path tree 
    def minKey(self, key, mstSet): 
        min = sys.maxsize # Initilaizing min value 
        for v in range(self.V): 
            if key[v] < min and mstSet[v] == False: 
                min = key[v] 
                min_index = v 
        return min_index 
  
    # Constructing and printing MST for a graph  
    def primMST(self): 
        start = time.time()
        key = [sys.maxsize] * self.V # Key values used to pick minimum weight edge in cut 
        parent = [None] * self.V # Array to store constructed MST 
        key[0] = 0 # Make key 0 so that this vertex is picked as first vertex 
        mstSet = [False] * self.V 

        parent[0] = -1 # First node is always the root
  
        for cout in range(self.V): 
            # Picking the minimum distance vertex from the set of vertices not yet processed.  
            # u is always equal to src in first iteration 
            u = self.minKey(key, mstSet) 
  
            # Putting the minimum distance vertex in the shortest path tree 
            mstSet[u] = True
  
            # Updating dist value of the adjacent vertices of the picked vertex only if the current  
            # distance is greater than new distance and the vertex in not in the shotest path tree 
            for v in range(self.V): 
                # graph[u][v] is non zero only for adjacent vertices of m 
                # mstSet[v] is false for vertices not yet included in MST 
                # Update the key only if graph[u][v] is smaller than key[v] 
                if self.graph[u][v] > 0 and mstSet[v] == False and key[v] > self.graph[u][v]: 
                        key[v] = self.graph[u][v] 
                        parent[v] = u 
        finish = time.time()
        total_time = finish - start
        self.printMST(parent, total_time) 

# graph generation
n = 6 # number of vertices
G = nx.complete_graph(n)
print(G)
u_delete = random.randint(1,n-1)
v_delete = u_delete - 1
G.remove_edge(u_delete, v_delete)
nx.draw(G, with_labels=True)

list_of_edges = list(nx.generate_edgelist(G,data=False))
edges = []
for line in list_of_edges:
  u, v = line.split()
  edges.append([int(u),int(v)])

nodes = list(G.nodes)

adjacency_matrix = [[0 for i in range(n)] for j in range(n)]

for i in range(len(edges)):
  v1 = edges[i][0]
  v2 = edges[i][1]
  adjacency_matrix[v1][v2] = random.randint(1,9)
  adjacency_matrix[v2][v1] = adjacency_matrix[v1][v2]

print('Adjacency matrix:')
for i in range(n):
  print(adjacency_matrix[i][:])

# finding MST
p = Graph(n)
p.graph = adjacency_matrix
p.primMST()
```
